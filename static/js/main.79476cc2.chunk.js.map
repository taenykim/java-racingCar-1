{"version":3,"sources":["modules/Car.ts","modules/racingCar.tsx","components/Processes.tsx","components/Result.tsx","modules/formValidator.ts","containers/App.tsx","serviceWorker.js","index.js"],"names":["Car","name","position","this","moveCars","cars","forEach","car","moveCar","makeProcess","style","marginTop","map","i","key","makeDistance","checkMoveCarCondition","go","Math","floor","random","num","_str","getWinner","max","winner","push","join","Processes","processes","process","Result","result","checkCarNameLength","carNames","length","trimCarNameBlank","carName","trim","checkCountIsNumber","count","match","App","useState","setCarNames","setCount","carNameLengthError","setCarNameLengthError","carNameIsBlankError","setCarNameIsBlankError","countIsNotNumberError","setCountIsNotNumberError","setProcesses","setResult","onChangeCarNames","useCallback","e","target","value","onChangeCount","onSubmit","preventDefault","validator","_carNames","split","filter","v","validateInput","_cars","makeCars","_processes","_count","Number","fontWeight","makeResult","htmlFor","width","id","type","onChange","color","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79476cc2.chunk.js","sourcesContent":["export default class Car {\n  name: string\n  position = 0\n\n  constructor(name: string) {\n    this.name = name\n  }\n  go() {\n    this.position = this.position + 1\n  }\n}\n","import React from 'react'\nimport Car from './Car'\n\nconst makeCars = (carNames: string[]) => {\n  const _cars = []\n  for (let i = 0; i < carNames.length; i++) {\n    _cars.push(new Car(carNames[i]))\n  }\n  return _cars\n}\n\nconst moveCars = (cars: Car[]) => {\n  cars.forEach((car) => {\n    moveCar(car)\n  })\n}\n\n// jsx 생성함수\nconst makeProcess = (cars: Car[]) => {\n  return (\n    <div style={{ marginTop: '20px' }}>\n      {cars.map((car, i) => (\n        <div key={i}>\n          {car.name}:{makeDistance(car.position)}\n        </div>\n      ))}\n    </div>\n  )\n}\n\n// jsx 생성함수\nconst makeResult = (cars: Car[]) => {\n  return (\n    <div style={{ marginTop: '20px', fontWeight: 'bold' }}>\n      {getWinner(cars)}가 최종 우승했습니다.\n    </div>\n  )\n}\n\nconst moveCar = (car: Car) => {\n  if (checkMoveCarCondition()) {\n    car.go()\n  }\n}\n\nconst checkMoveCarCondition = () => {\n  const MOVE_CAR_CONDITION = 4\n  const RANDOM_NUMBER_RANGE = 9\n  return Math.floor(Math.random() * RANDOM_NUMBER_RANGE) >= MOVE_CAR_CONDITION ? true : false\n}\n\nconst makeDistance = (num: number) => {\n  let _str = ''\n  for (let i = 0; i < num; i++) {\n    _str += '-'\n  }\n  return _str\n}\n\nconst getWinner = (cars: Car[]) => {\n  let max = 0\n  let winner: string[] = []\n\n  cars.forEach((car) => {\n    if (car.position > max) max = car.position\n  })\n\n  cars.forEach((car) => {\n    if (max === car.position) winner.push(car.name)\n  })\n\n  return winner.join()\n}\n\nexport { makeCars, moveCars, makeProcess, makeResult }\n\nexport { makeDistance, getWinner }\n","import React from 'react'\n\nconst Processes = ({ processes }: { processes: null | JSX.Element[] }) => {\n  return (\n    <>\n      {processes &&\n        processes.map((process: JSX.Element, i: number) => <div key={i}>{process}</div>)}\n    </>\n  )\n}\n\nexport default Processes\n","import React from 'react'\n\nconst Result = ({ result }: { result: null | JSX.Element }) => {\n  return <>{result}</>\n}\n\nexport default Result\n","const validateInput = (carNames: string, count: string) => {\n  let _carNames = carNames.split(',')\n  _carNames = trimCarNameBlank(_carNames)\n  _carNames = _carNames.filter((v) => v !== '')\n\n  if (_carNames.length === 0) {\n    return 'CAR_NAME_IS_BLANK_ERROR'\n  }\n\n  if (!checkCarNameLength(_carNames)) {\n    return 'CAR_NAME_LENGTH_ERROR'\n  }\n\n  if (!checkCountIsNumber(count)) {\n    return 'COUNT_IS_NOT_NUMBER_ERROR'\n  }\n  return _carNames\n}\n\nconst checkCarNameLength = (carNames: string[]) => {\n  const MAX_CARNAME_LENGTH = 5\n  for (let i = 0; i < carNames.length; i++) {\n    if (carNames[i].length > MAX_CARNAME_LENGTH) return false\n  }\n  return true\n}\n\nconst trimCarNameBlank = (carNames: string[]) => {\n  return carNames.map((carName) => carName.trim())\n}\n\nconst checkCountIsNumber = (count: string) => {\n  if (count.match(/\\D/g)) return false\n  return true\n}\n\nexport { validateInput }\n\nexport { checkCarNameLength, trimCarNameBlank, checkCountIsNumber }\n","import React, { useState, useCallback } from 'react'\nimport { makeCars, makeProcess, moveCars, makeResult } from '../modules/racingCar'\nimport Processes from '../components/Processes'\nimport Result from '../components/Result'\nimport { validateInput } from '../modules/formValidator'\n\nconst App = () => {\n  const [carNames, setCarNames] = useState('')\n  const [count, setCount] = useState('')\n  const [carNameLengthError, setCarNameLengthError] = useState(false)\n  const [carNameIsBlankError, setCarNameIsBlankError] = useState(false)\n  const [countIsNotNumberError, setCountIsNotNumberError] = useState(false)\n  const [processes, setProcesses] = useState<null | JSX.Element[]>(null)\n  const [result, setResult] = useState<null | JSX.Element>(null)\n\n  const onChangeCarNames = useCallback((e) => {\n    setCarNames(e.target.value)\n  }, [])\n\n  const onChangeCount = useCallback((e) => {\n    setCount(e.target.value)\n  }, [])\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault()\n      const validator = validateInput(carNames, count)\n      if (validator === 'CAR_NAME_IS_BLANK_ERROR') {\n        return setCarNameIsBlankError(true)\n      }\n      if (validator === 'CAR_NAME_LENGTH_ERROR') {\n        return setCarNameLengthError(true)\n      }\n      if (validator === 'COUNT_IS_NOT_NUMBER_ERROR') {\n        return setCountIsNotNumberError(true)\n      }\n      const _carNames = validator\n\n      setCarNameIsBlankError(false)\n      setCarNameLengthError(false)\n\n      const cars = makeCars(_carNames)\n      const _processes = []\n      let _count = Number(count)\n      for (let i = 0; i < _count; i++) {\n        moveCars(cars)\n        _processes.push(makeProcess(cars))\n      }\n      setProcesses([..._processes])\n      setResult(makeResult(cars))\n    },\n    [carNames, count]\n  )\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"carNames\">\n            경주할 자동차이름을 입력하세요. (이름은 쉼표(,)기준으로 구분)\n          </label>\n          <input\n            style={{ width: '500px' }}\n            id=\"carNames\"\n            type=\"text\"\n            value={carNames}\n            onChange={onChangeCarNames}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor=\"count\">시도할 횟수는 몇회인가요?</label>\n          <input id=\"count\" type=\"text\" value={count} onChange={onChangeCount}></input>\n          <button type=\"submit\">입력</button>\n        </div>\n        {carNameLengthError && (\n          <div id=\"carNameLengthError\" style={{ color: 'red' }}>\n            에러! 자동차이름은 5이하로 해야합니다\n          </div>\n        )}\n        {carNameIsBlankError && (\n          <div id=\"carNameIsBlankError\" style={{ color: 'red' }}>\n            에러! 자동차이름은 공백이 될 수 없습니다\n          </div>\n        )}\n        {countIsNotNumberError && (\n          <div id=\"carNameIsBlankError\" style={{ color: 'blue' }}>\n            에러! 시도할 횟수는 숫자를 입력하세오\n          </div>\n        )}\n      </form>\n      <Processes processes={processes} />\n      <Result result={result} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}